import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice, PreCheckoutQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import BOT_TOKEN, PROVIDER_TOKEN, SUBSCRIPTION_PRICES, CHANNEL_ID, CHANNEL_INVITE_LINK
from database import db, init_database
from admin import register_admin_handlers, show_admin_broadcast, show_admin_search_user
from channel_manager import ChannelManager, subscription_cleanup_task

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
channel_manager = ChannelManager(bot)

def get_back_keyboard():
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    return keyboard

# –ü–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
SUBSCRIPTIONS = {
    "1_month": {
        "title": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü",
        "description": "–î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É –Ω–∞ 1 –º–µ—Å—è—Ü",
        "price": SUBSCRIPTION_PRICES["1_month"],
        "days": 30
    },
    "3_months": {
        "title": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 3 –º–µ—Å—è—Ü–∞",
        "description": "–î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É –Ω–∞ 3 –º–µ—Å—è—Ü–∞",
        "price": SUBSCRIPTION_PRICES["3_months"],
        "days": 90
    },
    "6_months": {
        "title": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤",
        "description": "–î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤",
        "price": SUBSCRIPTION_PRICES["6_months"],
        "days": 180
    },
    "12_months": {
        "title": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤",
        "description": "–î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤",
        "price": SUBSCRIPTION_PRICES["12_months"],
        "days": 365
    }
}

@dp.message(Command("start"))
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user = await db.create_or_update_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    subscription_status = ""
    if user.is_subscription_active:
        subscription_status = f"\n‚úÖ –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {user.subscription_until.strftime('%d.%m.%Y %H:%M')}"
    else:
        subscription_status = "\n‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üíé –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="subscriptions")
    keyboard.button(text="‚ÑπÔ∏è –û –∫–∞–Ω–∞–ª–µ", callback_data="channel_info")
    keyboard.button(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    keyboard.adjust(2, 1)
    
    await message.answer(
        f"üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ–¥–ø–∏—Å–æ–∫!\n\n"
        f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—à–µ–º—É –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É –∑–∞ –∑–≤–µ–∑–¥—ã Telegram.{subscription_status}",
        reply_markup=keyboard.as_markup()
    )

@dp.callback_query(lambda c: c.data == "subscriptions")
async def show_subscriptions(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    keyboard = InlineKeyboardBuilder()
    
    for subscription_id, subscription in SUBSCRIPTIONS.items():
        keyboard.button(
            text=f"{subscription['title']} - {subscription['price']} ‚≠ê",
            callback_data=f"buy_{subscription_id}"
        )
    
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    keyboard.adjust(1)
    
    await callback.message.edit_text(
        "üíé **–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏:\n\n"
        "üì∫ –ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞—à–µ–≥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞!",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("buy_"))
async def process_purchase(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    subscription_id = callback.data.replace("buy_", "")
    
    if subscription_id not in SUBSCRIPTIONS:
        await callback.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    
    subscription = SUBSCRIPTIONS[subscription_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    user = await db.get_user(callback.from_user.id)
    if user and user.is_subscription_active:
        await callback.answer(
            f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {user.subscription_until.strftime('%d.%m.%Y')}. "
            "–ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ —Ç–µ–∫—É—â–µ–π.",
            show_alert=True
        )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏
    prices = [LabeledPrice(label=subscription["title"], amount=subscription["price"])]
    
    await bot.send_invoice(
        chat_id=callback.from_user.id,
        title=subscription["title"],
        description=subscription["description"],
        payload=f"subscription_{subscription_id}",
        provider_token="",  # –î–ª—è –∑–≤–µ–∑–¥ Telegram –Ω–µ –Ω—É–∂–µ–Ω
        currency="XTR",  # –í–∞–ª—é—Ç–∞ –¥–ª—è –∑–≤–µ–∑–¥ Telegram
        prices=prices
    )
    
    await callback.answer()

@dp.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    await bot.answer_pre_checkout_query(
        pre_checkout_query.id,
        ok=True
    )

@dp.message(lambda message: message.content_type == types.ContentType.SUCCESSFUL_PAYMENT)
async def process_successful_payment(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    payment = message.successful_payment
    subscription_id = payment.invoice_payload.replace("subscription_", "")
    
    if subscription_id in SUBSCRIPTIONS:
        subscription = SUBSCRIPTIONS[subscription_id]
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.create_purchase(
            user_id=message.from_user.id,
            product_id=subscription_id,
            product_title=subscription['title'],
            amount=payment.total_amount,
            telegram_payment_charge_id=payment.telegram_payment_charge_id,
            provider_payment_charge_id=payment.provider_payment_charge_id
        )
        
        # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        await db.activate_subscription(message.from_user.id, subscription['days'])
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª
        success = await channel_manager.add_user_to_channel(message.from_user.id)
        
        if success:
            await message.answer(
                f"‚úÖ **–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!**\n\n"
                f"–ü–æ–¥–ø–∏—Å–∫–∞: {subscription['title']}\n"
                f"–°—É–º–º–∞: {payment.total_amount} ‚≠ê\n"
                f"–ü–µ—Ä–∏–æ–¥: {subscription['days']} –¥–Ω–µ–π\n"
                f"ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: `{payment.telegram_payment_charge_id}`\n\n"
                f"üéâ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –≤–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª.",
                parse_mode="Markdown"
            )
        else:
            await message.answer(
                f"‚úÖ **–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –∫–∞–Ω–∞–ª.**\n\n"
                f"–ü–æ–¥–ø–∏—Å–∫–∞: {subscription['title']}\n"
                f"–°—É–º–º–∞: {payment.total_amount} ‚≠ê\n\n"
                f"‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É.",
                parse_mode="Markdown"
            )
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        logger.info(
            f"Successful payment: User {message.from_user.id}, "
            f"Subscription {subscription_id}, Amount {payment.total_amount} stars, "
            f"Days {subscription['days']}"
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

@dp.callback_query(lambda c: c.data == "info")
async def show_info(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    
    await callback.message.edit_text(
        "‚ÑπÔ∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ**\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–∫—É–ø–∞—Ç—å –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞ –∑–≤–µ–∑–¥—ã Telegram.\n\n"
        "üåü **–ß—Ç–æ —Ç–∞–∫–æ–µ –∑–≤–µ–∑–¥—ã Telegram?**\n"
        "–ó–≤–µ–∑–¥—ã - —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≤–∞–ª—é—Ç–∞ Telegram –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –≤ –±–æ—Ç–∞—Ö.\n\n"
        "üí≥ **–ö–∞–∫ –∫—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã?**\n"
        "–ó–≤–µ–∑–¥—ã –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –ø—Ä—è–º–æ –≤ Telegram —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "profile")
async def show_profile(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await db.get_user(callback.from_user.id)
    
    if user:
        subscription_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if user.is_subscription_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
        subscription_until = user.subscription_until.strftime("%d.%m.%Y %H:%M") if user.subscription_until else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        channel_status = "‚úÖ –í –∫–∞–Ω–∞–ª–µ" if user.is_in_channel else "‚ùå –ù–µ –≤ –∫–∞–Ω–∞–ª–µ"
        
        profile_text = (
            f"üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n"
            f"üÜî ID: `{user.telegram_id}`\n"
            f"üë§ –ò–º—è: {user.first_name}\n"
            f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üì∫ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: {subscription_status}\n"
            f"‚è∞ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {subscription_until}\n"
            f"üìç –°—Ç–∞—Ç—É—Å –≤ –∫–∞–Ω–∞–ª–µ: {channel_status}\n\n"
            f"üí∞ –í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: 0"
        )
    else:
        profile_text = "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start"
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫", callback_data="purchase_history")
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    keyboard.adjust(1)
    
    await callback.message.edit_text(
        profile_text,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "purchase_history")
async def show_purchase_history(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫"""
    purchases = await db.get_user_purchases(callback.from_user.id)
    
    if purchases:
        history_text = "üìä **–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫:**\n\n"
        for purchase in purchases[-5:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–∫—É–ø–æ–∫
            history_text += (
                f"‚Ä¢ {purchase.product_title}\n"
                f"  üí∞ {purchase.amount} ‚≠ê\n"
                f"  üìÖ {purchase.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            )
    else:
        history_text = "üìä **–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫**\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫."
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –ö –ø—Ä–æ—Ñ–∏–ª—é", callback_data="profile")
    
    await callback.message.edit_text(
        history_text,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "channel_info")
async def show_channel_info(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ"""
    user = await db.get_user(callback.from_user.id)
    
    if user and user.is_subscription_active:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        channel_info = await channel_manager.get_channel_info()
        
        if channel_info:
            info_text = (
                f"üì∫ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ**\n\n"
                f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {channel_info.get('title', '–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')}\n"
                f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {channel_info.get('members_count', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {channel_info.get('description', '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤')}\n\n"
                f"‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!\n"
                f"‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {user.subscription_until.strftime('%d.%m.%Y %H:%M')}\n\n"
            )
            
            if user.is_in_channel:
                info_text += "üéâ –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª–µ!"
            else:
                info_text += "üîó –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª."
                
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üîó –í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª", url=CHANNEL_INVITE_LINK)
            keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
            keyboard.adjust(1)
        else:
            info_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ."
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    else:
        info_text = (
            f"üì∫ **–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª**\n\n"
            f"üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n\n"
            f"üíé –í –∫–∞–Ω–∞–ª–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ:\n"
            f"‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç\n"
            f"‚Ä¢ –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
            f"‚Ä¢ –û–±—â–µ–Ω–∏–µ —Å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞–º–∏\n\n"
            f"üì∫ –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞!"
        )
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üì∫ –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="subscriptions")
        keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        keyboard.adjust(1)
    
    await callback.message.edit_text(
        info_text,
        parse_mode="Markdown",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user = await db.get_user(callback.from_user.id)
    
    if user:
        subscription_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if user.is_subscription_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
        subscription_info = ""
        
        if user.is_subscription_active:
            subscription_info = f"\n‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {user.subscription_until.strftime('%d.%m.%Y %H:%M')}"
        
        welcome_text = (
            f"üè† **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!**\n\n"
            f"üì∫ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: {subscription_status}{subscription_info}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
    else:
        welcome_text = "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üíé –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="subscriptions")
    keyboard.button(text="‚ÑπÔ∏è –û –∫–∞–Ω–∞–ª–µ", callback_data="channel_info")
    keyboard.button(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    keyboard.adjust(2, 1)
    
    await callback.message.edit_text(
        welcome_text,
        parse_mode="Markdown",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

@dp.message(Command("broadcast"))
async def broadcast_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /broadcast"""
    from admin import is_admin, send_broadcast
    
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    command_args = message.text.split(' ', 1)
    if len(command_args) < 2:
        await show_admin_broadcast(message)
        return
    
    broadcast_text = command_args[1]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    await message.reply("üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    success_count, error_count = await send_broadcast(bot, broadcast_text)
    
    result_text = (
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"‚Ä¢ –û—à–∏–±–æ–∫: {error_count}"
    )
    
    await message.reply(result_text)

@dp.message(Command("search_user"))
async def search_user_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search_user"""
    from admin import is_admin
    
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    command_args = message.text.split(' ', 1)
    if len(command_args) < 2:
        await show_admin_search_user(message)
        return
    
    search_query = command_args[1].strip()
    
    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        if search_query.startswith('@'):
            username = search_query[1:]
            user = await db.get_user_by_username(username)
        else:
            user_id = int(search_query)
            user = await db.get_user_by_id(user_id)
        
        if not user:
            await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{search_query}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
        subscriptions = await db.get_user_subscriptions(user.telegram_id)
        
        user_info = (
            f"üë§ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ**\n\n"
            f"üÜî ID: `{user.telegram_id}`\n"
            f"üë§ –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üìù Username: @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üíé –ü—Ä–µ–º–∏—É–º: {'–î–∞' if user.is_premium_active else '–ù–µ—Ç'}\n"
            f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        )
        
        if subscriptions:
            user_info += "üìã **–ü–æ–¥–ø–∏—Å–∫–∏:**\n"
            for sub in subscriptions:
                status = "–ê–∫—Ç–∏–≤–Ω–∞" if sub.is_active else "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
                user_info += f"‚Ä¢ {sub.product_title} - {status}\n"
        else:
            user_info += "üìã **–ü–æ–¥–ø–∏—Å–∫–∏:** –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫\n"
        
        await message.reply(user_info, parse_mode="Markdown")
        
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await init_database()
        
        # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        asyncio.create_task(subscription_cleanup_task(bot))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        register_admin_handlers(dp)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ (–µ—Å–ª–∏ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
        await bot.delete_webhook(drop_pending_updates=True)
        
        logger.info("Bot started with subscription cleanup task")
        
        # –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()
        await db.close()

if __name__ == "__main__":
    asyncio.run(main())