import asyncio
import logging
from aiogram import types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import ADMIN_IDS, CHANNEL_ID
from database import db

logger = logging.getLogger(__name__)

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

def admin_required(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    async def wrapper(message_or_callback, *args, **kwargs):
        user_id = message_or_callback.from_user.id
        if not is_admin(user_id):
            if isinstance(message_or_callback, types.Message):
                await message_or_callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            else:
                await message_or_callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
            return
        return await func(message_or_callback, *args, **kwargs)
    return wrapper

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã

async def admin_start(message: types.Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not is_admin(message.from_user.id):
        return
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
    keyboard.button(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
    keyboard.button(text="üí∞ –ü–ª–∞—Ç–µ–∂–∏", callback_data="admin_payments")
    keyboard.button(text="üì∫ –ö–∞–Ω–∞–ª", callback_data="admin_channel")
    keyboard.button(text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
    keyboard.adjust(2)
    
    await message.answer(
        "üîß **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )

async def admin_menu_show(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è callback"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
    keyboard.button(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
    keyboard.button(text="üí∞ –ü–ª–∞—Ç–µ–∂–∏", callback_data="admin_payments")
    keyboard.button(text="üì∫ –ö–∞–Ω–∞–ª", callback_data="admin_channel")
    keyboard.button(text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
    keyboard.adjust(2)
    
    await callback.message.edit_text(
        "üîß **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

@admin_required
async def show_admin_stats(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    total_users = await db.get_total_users_count()
    premium_users = await db.get_premium_users_count()
    total_purchases = await db.get_total_purchases_count()
    total_revenue = await db.get_total_revenue()
    
    stats_text = (
        "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üåü –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {premium_users}\n"
        f"üí∞ –í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: {total_purchases}\n"
        f"‚≠ê –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_revenue} –∑–≤–µ–∑–¥\n"
    )
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats")
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")
    keyboard.adjust(2)
    
    try:
        await callback.message.edit_text(
            stats_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
    except Exception as e:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        if "message is not modified" not in str(e):
            raise e

@admin_required
async def show_admin_users(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö"""
    recent_users = await db.get_recent_users(10)
    
    users_text = "üë• **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n\n"
    
    for user in recent_users:
        status = "üåü" if user.is_premium_active else "üë§"
        users_text += (
            f"{status} {user.first_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'} "
            f"(@{user.username or '–±–µ–∑ username'})\n"
            f"ID: `{user.telegram_id}`\n"
            f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y')}\n\n"
        )
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search_user")
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")
    keyboard.adjust(1)
    
    try:
        await callback.message.edit_text(
            users_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
    except Exception as e:
        if "message is not modified" not in str(e):
            raise e

@admin_required
async def show_admin_payments(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–∞—Ö"""
    recent_payments = await db.get_recent_purchases(10)
    
    payments_text = "üí∞ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏:**\n\n"
    
    for payment in recent_payments:
        payments_text += (
            f"‚Ä¢ {payment.product_title}\n"
            f"  üë§ ID: `{payment.user_id}`\n"
            f"  üí∞ {payment.amount} ‚≠ê\n"
            f"  üìÖ {payment.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        )
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="admin_payment_stats")
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")
    keyboard.adjust(1)
    
    try:
        await callback.message.edit_text(
            payments_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
    except Exception as e:
        if "message is not modified" not in str(e):
            raise e

@admin_required
async def show_admin_settings(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
    settings_text = (
        "üîß **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞**\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:"
    )
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")
    keyboard.button(text="üóÑÔ∏è –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_export")
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")
    keyboard.adjust(1)
    
    try:
        await callback.message.edit_text(
            settings_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
    except Exception as e:
        if "message is not modified" not in str(e):
            raise e

@admin_required
async def show_admin_channel(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º
    active_subscribers = await db.get_active_subscribers()
    expired_subscriptions = await db.get_expired_subscriptions()
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    all_users = await db.get_all_users()
    total_users = len(all_users)
    users_in_channel = len([u for u in all_users if u.is_in_channel])
    
    stats_text = (
        f"üì∫ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º**\n\n"
        f"üÜî ID –∫–∞–Ω–∞–ª–∞: `{CHANNEL_ID}`\n\n"
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {len(active_subscribers)}\n"
        f"‚ùå –ò—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {len(expired_subscriptions)}\n"
        f"üì∫ –í –∫–∞–Ω–∞–ª–µ: {users_in_channel}\n\n"
        f"üìà **–ö–æ–Ω–≤–µ—Ä—Å–∏—è:** {(len(active_subscribers)/total_users*100):.1f}%"
    )
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª", callback_data="admin_sync_channel")
    keyboard.button(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ", callback_data="admin_cleanup_expired")
    keyboard.button(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤", callback_data="admin_subscribers_list")
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")
    keyboard.adjust(1)
    
    try:
        await callback.message.edit_text(
            stats_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
    except Exception as e:
        if "message is not modified" not in str(e):
            raise e
    await callback.answer()

@admin_required
async def admin_sync_channel(callback: types.CallbackQuery):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–∞–Ω–∞–ª–æ–º"""
    from channel_manager import ChannelManager
    
    channel_manager = ChannelManager(callback.bot)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
    active_subscribers = await db.get_active_subscribers()
    
    added_count = 0
    removed_count = 0
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
    for user in active_subscribers:
        if not user.is_in_channel:
            success = await channel_manager.add_user_to_channel(user.user_id)
            if success:
                added_count += 1
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
    expired_users = await db.get_expired_subscriptions()
    for user in expired_users:
        if user.is_in_channel:
            success = await channel_manager.remove_user_from_channel(user.user_id)
            if success:
                removed_count += 1
    
    result_text = (
        f"‚úÖ **–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n"
        f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: {added_count}\n"
        f"‚ûñ –£–¥–∞–ª–µ–Ω–æ: {removed_count}"
    )
    
    await callback.answer(result_text, show_alert=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await show_admin_channel(callback)

@admin_required
async def admin_cleanup_expired(callback: types.CallbackQuery):
    """–û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""
    from channel_manager import ChannelManager
    
    channel_manager = ChannelManager(callback.bot)
    removed_count = await channel_manager.cleanup_expired_subscriptions()
    
    result_text = f"üßπ –£–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏: {removed_count}"
    await callback.answer(result_text, show_alert=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await show_admin_channel(callback)

@admin_required
async def admin_subscribers_list(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
    active_subscribers = await db.get_active_subscribers()
    
    if not active_subscribers:
        await callback.answer("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤", show_alert=True)
        return
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–≤—ã–º–∏ 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    subscribers_text = "üë• **–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏:**\n\n"
    
    for i, user in enumerate(active_subscribers[:20], 1):
        status_emoji = "‚úÖ" if user.is_in_channel else "‚ùå"
        subscribers_text += (
            f"{i}. {status_emoji} {user.first_name} (@{user.username or '–Ω–µ—Ç'})\n"
            f"   –î–æ: {user.subscription_until.strftime('%d.%m.%Y %H:%M')}\n\n"
        )
    
    if len(active_subscribers) > 20:
        subscribers_text += f"... –∏ –µ—â–µ {len(active_subscribers) - 20} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_channel")
    
    try:
        await callback.message.edit_text(
            subscribers_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
    except Exception as e:
        if "message is not modified" not in str(e):
            raise e
    await callback.answer()

async def show_admin_broadcast(callback_or_message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–∞—Å—Å—ã–ª–∫–∏"""
    user_id = callback_or_message.from_user.id
    
    if not is_admin(user_id):
        if hasattr(callback_or_message, 'answer'):
            await callback_or_message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        else:
            await callback_or_message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    text = (
        "üì¢ **–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π**\n\n"
        "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "`/broadcast <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>`\n\n"
        "–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞."
    )
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")
    
    if hasattr(callback_or_message, 'message'):
        # –≠—Ç–æ callback
        await callback_or_message.message.edit_text(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        await callback_or_message.answer()
    else:
        # –≠—Ç–æ message
        await callback_or_message.reply(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )

@admin_required
async def show_admin_export(callback: types.CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        csv_data = await export_users_data()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        import tempfile
        import os
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False, encoding='utf-8') as f:
            f.write(csv_data)
            temp_file_path = f.name
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        from aiogram.types import FSInputFile
        file = FSInputFile(temp_file_path, filename="users_export.csv")
        
        await callback.message.answer_document(
            file,
            caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(temp_file_path)
        
        await callback.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã", show_alert=True)
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}", show_alert=True)

async def show_admin_search_user(callback_or_message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback_or_message.from_user.id
    
    if not is_admin(user_id):
        if hasattr(callback_or_message, 'answer'):
            await callback_or_message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        else:
            await callback_or_message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    text = (
        "üîç **–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
        "–î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "`/search_user <ID –∏–ª–∏ username>`\n\n"
        "–í—ã –ø–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –µ–≥–æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö."
    )
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")
    
    if hasattr(callback_or_message, 'message'):
        # –≠—Ç–æ callback
        await callback_or_message.message.edit_text(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        await callback_or_message.answer()
    else:
        # –≠—Ç–æ message
        await callback_or_message.reply(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )

@admin_required
async def show_admin_payment_stats(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π"""
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π
    total_revenue = await db.get_total_revenue()
    total_purchases = await db.get_total_purchases_count()
    recent_payments = await db.get_recent_purchases(5)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
    from datetime import datetime, timedelta
    today = datetime.now()
    daily_stats = []
    
    for i in range(7):
        date = today - timedelta(days=i)
        day_revenue = await db.get_revenue_by_date(date.date())
        day_purchases = await db.get_purchases_count_by_date(date.date())
        daily_stats.append((date.strftime('%d.%m'), day_revenue, day_purchases))
    
    stats_text = (
        "üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π**\n\n"
        f"üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_revenue} ‚≠ê\n"
        f"üõí –í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: {total_purchases}\n\n"
        "üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º:**\n"
    )
    
    for date_str, revenue, purchases in daily_stats:
        stats_text += f"‚Ä¢ {date_str}: {revenue} ‚≠ê ({purchases} –ø–æ–∫—É–ø–æ–∫)\n"
    
    if recent_payments:
        stats_text += "\nüïí **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏:**\n"
        for payment in recent_payments:
            stats_text += (
                f"‚Ä¢ {payment.product_title} - {payment.amount} ‚≠ê\n"
                f"  üë§ ID: {payment.user_id}\n"
            )
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_payments")
    
    await callback.message.edit_text(
        stats_text,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_admin_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    @dp.message(Command("admin"))
    async def admin_command(message: types.Message):
        await admin_start(message)
    
    @dp.callback_query(lambda c: c.data == "admin_stats")
    async def admin_stats_callback(callback: types.CallbackQuery):
        await show_admin_stats(callback)
    
    @dp.callback_query(lambda c: c.data == "admin_users")
    async def admin_users_callback(callback: types.CallbackQuery):
        await show_admin_users(callback)
    
    @dp.callback_query(lambda c: c.data == "admin_payments")
    async def admin_payments_callback(callback: types.CallbackQuery):
        await show_admin_payments(callback)
    
    @dp.callback_query(lambda c: c.data == "admin_channel")
    async def admin_channel_callback(callback: types.CallbackQuery):
        await show_admin_channel(callback)
    
    @dp.callback_query(lambda c: c.data == "admin_sync_channel")
    async def admin_sync_channel_callback(callback: types.CallbackQuery):
        await admin_sync_channel(callback)
    
    @dp.callback_query(lambda c: c.data == "admin_cleanup_expired")
    async def admin_cleanup_expired_callback(callback: types.CallbackQuery):
        await admin_cleanup_expired(callback)
    
    @dp.callback_query(lambda c: c.data == "admin_subscribers_list")
    async def admin_subscribers_list_callback(callback: types.CallbackQuery):
        await admin_subscribers_list(callback)
    
    @dp.callback_query(lambda c: c.data == "admin_settings")
    async def admin_settings_callback(callback: types.CallbackQuery):
        await show_admin_settings(callback)
    
    @dp.callback_query(lambda c: c.data == "admin_menu")
    async def admin_menu_callback(callback: types.CallbackQuery):
        await admin_menu_show(callback)
    
    @dp.callback_query(lambda c: c.data == "admin_broadcast")
    async def admin_broadcast_callback(callback: types.CallbackQuery):
        await show_admin_broadcast(callback)
    
    @dp.callback_query(lambda c: c.data == "admin_export")
    async def admin_export_callback(callback: types.CallbackQuery):
        await show_admin_export(callback)
    
    @dp.callback_query(lambda c: c.data == "admin_search_user")
    async def admin_search_user_callback(callback: types.CallbackQuery):
        await show_admin_search_user(callback)
    
    @dp.callback_query(lambda c: c.data == "admin_payment_stats")
    async def admin_payment_stats_callback(callback: types.CallbackQuery):
        await show_admin_payment_stats(callback)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

async def send_broadcast(bot, message_text: str, user_ids: list = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    if user_ids is None:
        user_ids = await db.get_all_user_ids()
    
    success_count = 0
    error_count = 0
    
    for user_id in user_ids:
        try:
            await bot.send_message(user_id, message_text, parse_mode="Markdown")
            success_count += 1
            await asyncio.sleep(0.05)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
        except Exception as e:
            error_count += 1
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    return success_count, error_count

async def export_users_data():
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CSV —Ñ–æ—Ä–º–∞—Ç"""
    users = await db.get_all_users()
    
    csv_data = "ID,Username,First Name,Last Name,Is Premium,Created At\n"
    
    for user in users:
        csv_data += (
            f"{user.telegram_id},"
            f"{user.username or ''},"
            f"{user.first_name or ''},"
            f"{user.last_name or ''},"
            f"{user.is_premium_active},"
            f"{user.created_at.strftime('%Y-%m-%d %H:%M:%S')}\n"
        )
    
    return csv_data